#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer definitions
#define DVORAK 0
#define NUM    1
#define SYM    2
#define FUN    3
#define NAV    4
#define ADJ    5
// -----------------

&lt {
    quick-tap-ms = <200>;
};

/ {
    macros {
        ZMK_MACRO(ae,
            bindings = <&kp K_APP &kp A &kp DOUBLE_QUOTES>;
        )
        ZMK_MACRO(oe,
            bindings = <&kp K_APP &kp O &kp DOUBLE_QUOTES>;
        )
        ZMK_MACRO(ue,
            bindings = <&kp K_APP &kp U &kp DOUBLE_QUOTES>;
        )
        ZMK_MACRO(ss,
            bindings = <&kp K_APP &kp S &kp S>;
        )
        ZMK_MACRO(arrow,
            bindings = <&kp MINUS &kp GREATER_THAN>;
        )
        ZMK_MACRO(vim_write,
            bindings = <&kp ESC &kp LS(SEMICOLON) &kp W &kp A &kp RETURN>;
        )
        ZMK_MACRO(vim_close,
            bindings = <&kp ESC &kp LS(SEMICOLON) &kp Q &kp A &kp RETURN>;
        )
        ZMK_MACRO(zellij_floating,
            bindings = <&kp LC(P) &kp W>;
        )
    };

	combos {
		compatible = "zmk,combos";
		combo_del {
			timeout-ms = <50>;
			key-positions = <30 31>;
			bindings = <&kp DEL>;
		};
		combo_lpar {
			timeout-ms = <50>;
			key-positions = <2 3>;
			bindings = <&kp LPAR>;
		};
		combo_rpar {
			timeout-ms = <50>;
			key-positions = <6 7>;
			bindings = <&kp RPAR>;
		};
		combo_equal {
			timeout-ms = <50>;
			key-positions = <11 12>;
			bindings = <&kp EQUAL>;
		};
		combo_underscore {
			timeout-ms = <50>;
			key-positions = <12 13>;
			bindings = <&kp UNDERSCORE>;
		};
		combo_esc {
			timeout-ms = <50>;
			key-positions = <16 17>;
			bindings = <&kp ESC>;
		};
        combo_colon {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp LS(SEMICOLON)>;
        };
        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&caps_word>;
        };
        combo_caret {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp CARET>;
        };
        combo_dollar {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp DOLLAR>;
        };
        combo_arrow {
            timeout-ms = <50>;
            key-positions = <3 13>;
            bindings = <&arrow>;
        };
        combo_minus {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp MINUS>;
        };
        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp SEMICOLON>;
        };
        combo_vim_write {
            timeout-ms = <50>;
            key-positions = <11 12 13>;
            bindings = <&vim_write>;
        };
        combo_vim_close {
            timeout-ms = <50>;
            key-positions = <16 17 18>;
            bindings = <&vim_close>;
        };
        combo_zellij_floating {
            timeout-ms = <50>;
            key-positions = <6 16>;
            bindings = <&zellij_floating>;
        };
        combo_left_bracket {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp LEFT_BRACKET>;
        };
        combo_right_bracket {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp RIGHT_BRACKET>;
        };
        combo_left_brace {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp LEFT_BRACE>;
        };
        combo_right_brace {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp RIGHT_BRACE>;
        };
	};
    
    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>; 
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        try_layer {
            if-layers = <2 3>;
            then-layer = <5>;
        };
    };

	keymap {
		compatible = "zmk,keymap";
		dvorak_layer {
			label = "DVORAK";
			bindings = <
			&kp SINGLE_QUOTE &kp COMMA   &kp DOT      &kp P             &kp Y          &kp F          &kp G         &kp C        &kp R       &kp L 
			&bhm LGUI A      &bhm LALT O &bhm LCTRL E &bhm LSHIFT U     &kp I          &kp D          &bhm RSHIFT H &bhm RCTRL T &bhm RALT N &bhm RGUI S
			&kp SLASH        &kp Q       &kp J        &kp K             &kp X          &kp B          &kp M         &kp W        &kp V       &kp Z
							                          &lt NAV BACKSPACE &lt FUN TAB    &lt SYM RETURN &lt NUM SPACE
			>;
		};

		num_layer {
			label = "NUM";
			bindings = <
			&trans &kp N7 &kp N8 &kp N9 &trans    &trans &trans &trans &trans &trans
			&trans &kp N4 &kp N5 &kp N6 &trans    &trans &trans &trans &trans &trans
			&trans &kp N1 &kp N2 &kp N3 &trans    &trans &trans &trans &trans &trans
								 &kp N0 &trans    &trans &trans
			>;
		};

		sym_layer {
			label = "SYM";
			bindings = <
			&kp TILDE     &kp AMPERSAND   &kp ASTERISK &ae      &oe       &trans &trans &trans &trans &trans
			&kp GRAVE     &kp PLUS        &kp PERCENT  &kp PIPE &ue       &trans &trans &trans &trans &trans
			&kp BACKSLASH &kp EXCLAMATION &kp AT_SIGN  &kp HASH &ss	      &trans &trans &trans &trans &trans
										               &trans   &trans    &trans &trans
			>;
		};

		fun_layer {
			label = "FUN";
			bindings = <
			&kp F12 &kp F7 &kp F8 &kp F9 &trans    &trans &trans &trans &trans &trans
			&kp F11 &kp F4 &kp F5 &kp F6 &trans    &trans &trans &trans &trans &trans
			&kp F10 &kp F1 &kp F2 &kp F3 &trans    &trans &trans &trans &trans &trans
							      &trans &trans    &trans &trans  
			>;
		};

        nav_layer {
			label = "NAV";
			bindings = <
			&trans &trans &trans &trans &trans    &trans   &kp LG(N1) &kp LG(N2) &kp LG(N3) &kp LG(N4)
			&trans &trans &trans &trans &trans 	  &kp LEFT &kp DOWN   &kp UP     &kp RIGHT  &trans
			&trans &trans &trans &trans &trans    &kp HOME &kp PG_DN  &kp PG_UP  &kp END    &trans
								 &trans &trans    &trans   &trans 
			>;
		};

        adj_layer {
            label = "ADJ";
            bindings = <
			&none &none &none &none &none    &none      &none      &none      &none         &none
			&none &none &none &none &none    &bt BT_CLR &bt BT_NXT &bt BT_PRV &kp C_AL_LOCK &none
			&none &none &none &none &none    &none      &none      &none      &none         &none
							  &none &none    &none      &none  
			>;
        };
	};
};
