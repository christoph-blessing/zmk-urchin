#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layer definitions
#define QWERTY 0
#define NUM    1
#define SYM    2
#define FUN    3
#define NAV    4
#define ADJ    5
// -----------------

/ {
    macros {
        ae: ae {
            label = "ae";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings = <&kp K_APP &kp A &kp DOUBLE_QUOTES>;
        };
        oe: oe {
            label = "oe";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings = <&kp K_APP &kp O &kp DOUBLE_QUOTES>;
        };
        ue: ue {
            label = "ue";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings = <&kp K_APP &kp U &kp DOUBLE_QUOTES>;
        };
        ss: ss {
            label = "ss";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings = <&kp K_APP &kp S &kp S>;
        };
    };

	combos {
		compatible = "zmk,combos";
		combo_del {
			timeout-ms = <50>;
			key-positions = <30 31>;
			bindings = <&kp DEL>;
		};
		combo_lpar {
			timeout-ms = <50>;
			key-positions = <10 11>;
			bindings = <&kp LPAR>;
		};
		combo_rpar {
			timeout-ms = <50>;
			key-positions = <18 19>;
			bindings = <&kp RPAR>;
		};
		combo_equal {
			timeout-ms = <50>;
			key-positions = <11 12>;
			bindings = <&kp EQUAL>;
		};
		combo_underscore {
			timeout-ms = <50>;
			key-positions = <12 13>;
			bindings = <&kp UNDERSCORE>;
		};
		combo_esc {
			timeout-ms = <50>;
			key-positions = <16 17>;
			bindings = <&kp ESC>;
		};
        combo_colon {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp LS(SEMICOLON)>;
        };
        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&caps_word>;
        };
	};
    
    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>; 
        };
        double_single_quote: double_single_quote {
            compatible = "zmk,behavior-mod-morph";
            label = "DOUBLE_SINGLE_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES>, <&kp SINGLE_QUOTE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        mtdsq: mod_tap_double_single_quote {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_DOUBLE_SINGLE_QUOTE";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&double_single_quote>; 
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        try_layer {
            if-layers = <1 4>;
            then-layer = <5>;
        };
    };

	keymap {
		compatible = "zmk,keymap";
		qwerty_layer {
			label = "QWERTY";
			bindings = <
			&kp Q       &kp W       &kp E        &kp R              &kp T          &kp Y          &kp U         &kp I        &kp O       &kp P 
			&bhm LGUI A &bhm LALT S &bhm LCTRL D &bhm LSHIFT F      &kp G          &kp H          &bhm RSHIFT J &bhm RCTRL K &bhm RALT L &mtdsq RGUI 0
			&kp Z       &kp X       &kp C        &kp V              &kp B          &kp N          &kp M         &kp COMMA    &kp DOT     &kp SLASH
							                     &lt NAV BACKSPACE  &lt FUN TAB    &lt SYM RETURN &lt NUM SPACE
			>;
		};

		num_layer {
			label = "NUM";
			bindings = <
			&kp GRAVE        &kp N7 &kp N8 &kp N9 &kp BACKSLASH        &trans &trans &trans &trans &trans
			&kp LEFT_BRACKET &kp N4 &kp N5 &kp N6 &kp RIGHT_BRACKET    &trans &trans &trans &trans &trans
			&kp MINUS        &kp N1 &kp N2 &kp N3 &trans  	           &trans &trans &trans &trans &trans
										   &kp N0 &kp SINGLE_QUOTE     &trans &trans
			>;
		};

		sym_layer {
			label = "SYM";
			bindings = <
			&kp TILDE      &kp AMPERSAND   &kp ASTERISK &trans     &kp PIPE        &trans &trans &trans &trans &trans
			&kp LEFT_BRACE &kp CARET       &kp PERCENT  &kp DOLLAR &kp RIGHT_BRACE &ae    &oe    &ue    &ss    &trans
			&trans         &kp EXCLAMATION &kp AT_SIGN  &kp HASH   &kp PLUS		   &trans &trans &trans &trans &trans
														&trans     &kp SEMICOLON   &trans &trans
			>;
		};

		fun_layer {
			label = "FUN";
			bindings = <
			&kp F12 &kp F7 &kp F8 &kp F9 &trans    &trans &trans &trans &trans &trans
			&kp F11 &kp F4 &kp F5 &kp F6 &trans    &trans &trans &trans &trans &trans
			&kp F10 &kp F1 &kp F2 &kp F3 &trans    &trans &trans &trans &trans &trans
							      &trans &trans    &trans &trans  
			>;
		};

        nav_layer {
			label = "NAV";
			bindings = <
			&trans &trans &trans &trans &trans    &trans   &kp LG(N1) &kp LG(N2) &kp LG(N3) &kp LG(N4)
			&trans &trans &trans &trans &trans 	  &kp LEFT &kp DOWN   &kp UP     &kp RIGHT  &trans
			&trans &trans &trans &trans &trans    &kp HOME &kp PG_DN  &kp PG_UP  &kp END    &trans
								 &trans &trans    &trans   &trans 
			>;
		};

        adj_layer {
            label = "ADJ";
            bindings = <
			&none &none &none &none &none    &none      &none      &none      &none         &none
			&none &none &none &none &none    &bt BT_CLR &bt BT_NXT &bt BT_PRV &kp C_AL_LOCK &none
			&none &none &none &none &none    &none      &none      &none      &none         &none
							  &none &none    &none      &none  
			>;
        };
	};
};
